module testbench();
parameter STAGES    = `STAGES_DEF;  // Parameter for complexity research purposes
parameter SIG_WIDTH = 256*`WORDS_DEF;  // parameter value generated by script

/*
  ===============================
    Testbench skeleton
    this part stable despite DUT
  ===============================
*/
import "DPI-C" function void init_timer();
import "DPI-C" function void print_time(input longint unsigned cntr);
import "DPI-C" function void get_fpga_acc(input bit [SIG_WIDTH-1:0] sig_in, 
                                          input longint unsigned  arr_size_in, 
                                                                  arr_size_out,
                                          output bit [SIG_WIDTH-1:0] sig_out);

logic clk;
initial clk = 0;
always #10 clk = ~clk;

logic [SIG_WIDTH-1:0] sig_in;
bit   [SIG_WIDTH-1:0] sig_out;

initial begin 
  $wlfdumpvars(1, testbench);   
end

`ifdef FPGA
initial forever begin
  @(posedge clk);
  #5;
  get_fpga_acc(sig_in, SIG_WIDTH/8, SIG_WIDTH/8, sig_out);
end
`else
/*
  ===============================
    Example of DUT instantiation
    Shows how script understand DUT connection
  ===============================
*/
logic  [SIG_WIDTH-1:0] sig_out_dut;
assign sig_out = sig_out_dut;
inverse #(.SIG_WIDTH(SIG_WIDTH),.STAGES(STAGES)) DUT(
  .clk(clk),
  .in(sig_in),
  .out(sig_out_dut)
);

//===============================
`endif

/*
  ===============================
    Generate test stimulus part
  ===============================
*/
initial forever begin
  @(posedge clk);
  repeat(SIG_WIDTH/32 + (SIG_WIDTH%32!=0)) begin
    sig_in = (sig_in << 32) | {'0,$random()};
  end
end
//===============================


/*
  ===============================
    Check results part
  ===============================
*/
logic [SIG_WIDTH-1:0] sig_inverted;
assign sig_inverted = {<<{sig_in}};
localparam PAST_STAGES = STAGES -1;
longint unsigned cntr;
initial begin
  init_timer();
  cntr = 0;
  repeat(STAGES+1000000) @(posedge clk)#1cntr++;
  print_time(cntr);
  $display(cntr);
  $finish();
end

assert property (
    @(posedge clk) disable iff (cntr <= STAGES)
    sig_out == $past(sig_inverted, PAST_STAGES))
    else begin
      $error("=======\nin =%h\n\nref=%h\n\nout=%h\n\noin=%h\n\n", $past(sig_in, PAST_STAGES), $past(sig_inverted, PAST_STAGES),sig_out, {<<{sig_out}});
      $stop();
    end

//===============================

endmodule
