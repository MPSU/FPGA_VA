module testbench();
parameter STAGES    = 128;  // Parameter for complexity research purposes
parameter SIG_WIDTH = 128;  // parameter value generated by script


/*
  ===============================
    Example of DUT instantiation
    Shows how script understand DUT connection
  ===============================
*/

// inverse #(.SIG_WIDTH(SIG_WIDTH),.STAGES(STAGES)) DUT(
//   .clk(clk),
//   .in(sig_in),
//   .out(sig_out)
// );

//===============================


/*
  ===============================
    Testbench skeleton
    this part stable despite DUT
  ===============================
*/
import "DPI-C" function void get_fpga_acc(input byte sig_in[], 
                                          input longint unsigned  arr_size_in, 
                                                                  arr_size_out,
                                          output byte sig_out[]);

logic clk;
initial clk = 0;
always #5 clk = ~clk;

logic [SIG_WIDTH-1:0] sig_in;
logic [SIG_WIDTH-1:0] sig_out;
logic byte emulated_sig_in  [SIG_WIDTH/8];
logic byte emulated_sig_out [SIG_WIDTH/8];

initial forever begin
  @(posedge clk);
  emulated_sig_in <= sig_in;
  get_fpga_acc(emulated_sig_in, SIG_WIDTH/8, SIG_WIDTH/8, emulated_sig_out);
  sig_out <= {>>{emulated_sig_out}};
end
//===============================


/*
  ===============================
    Generate test stimulus part
  ===============================
*/
initial forever begin
  @(posedge clk);
  repeat(SIG_WIDTH/32 + (SIG_WIDTH%32!=0)) begin
    sig_in = (sig_in << 32) | {'0,$random()};
  end
end
//===============================


/*
  ===============================
    Check results part
  ===============================
*/
logic [SIG_WIDTH-1:0] sig_inverted;
assign sig_inverted = {<<{sig_in}};
localparam PAST_STAGES = STAGES -1;
int cntr;
initial begin
  cntr = 0;
  repeat(1024) @(posedge clk)cntr++;
  $finish();
end

assert property (
    @(posedge clk) disable iff (cntr <= STAGES)
    sig_out == $past(sig_inverted, PAST_STAGES)
);
//===============================

endmodule